#!/bin/bash

set -e

version=${1:-latest}
image=sclevine/nanocf:$version

nanocf_dir=$(cd `dirname "$0"` && cd .. && pwd)
image_dir=$nanocf_dir/image
micropcf_dir=$nanocf_dir/micropcf
releases_dir=$micropcf_dir/releases

trap cleanup EXIT
function cleanup {
  eval "$unpatch"
  [[ ! -z $temp_container ]] && docker rm -v -f "$temp_container" || true
  [[ ! -z $temp_image ]] && docker rmi -f "$temp_image" || true
}

unpatch=true
function patch_repo() {
  local patch=$nanocf_dir/patches/$(basename "$1").patch
  git -C "$1" apply "$patch"
  unpatch="${unpatch}; git -C \"$1\" apply -R \"$patch\""
}

patch_repo "$micropcf_dir"
patch_repo "$releases_dir/cf-release"
patch_repo "$releases_dir/cf-release/src/consul-release"
patch_repo "$releases_dir/diego-release"

releases='diego cf garden-linux etcd'
"$micropcf_dir/bosh/build" "$image_dir/assets" $releases
cp -r "$micropcf_dir"/images/{manifest.yml,scripts} "$image_dir/assets/"

temp_image=$(uuidgen | tr -d - | tr [:upper:] [:lower:])
docker build --force-rm -t "$temp_image" $@ "$image_dir"
temp_container=$(docker run -d -m 3g --privileged "$temp_image")
docker attach "$temp_container"
docker commit -c 'ENTRYPOINT ["/usr/local/bin/nanocf"]' "$temp_container" "$image"
